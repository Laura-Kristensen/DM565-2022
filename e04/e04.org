#+STARTUP: showall
#+STARTUP: hideblocks
#+PROPERTY: header-args:zsh :results output
* Tabular-Like Data Formats. Discovery-Like Command-Line Tools.
** 1
#+name: files
- File_Ex_UTF8.txt
- File_Ex_Latin1.txt
- File_Ex_Unix_Eol.txt
- File_Ex_MS-DOS_Eol.txt

#+begin_src zsh :var files=files :cache yes :results output table
  for file in $files
  do
      curl https://imada.sdu.dk/~kslarsen/dm565/Files/$file --output $file --silent
  done
  ls | grep txt
#+end_src


*** ~file~
#+begin_src zsh :var file=files
  file $file
#+end_src


*** ~wc~
Display lines, words and byte for each input file
#+begin_src zsh :var file=files
  wc $file
#+end_src

*** ~od~
octal dump.

~od -tcuC~: show byte value in decimal and ascii character if printable
Options:
-t type     Specify the output format.
Output format:
- c: Characters in the default character set. Non-printing characters are
  represented as 3-digit octal character codes
- u: unsigned decimal
- C: of size char (8 bit)

#+begin_src zsh :var file=files
  for f in $file
  do
      echo $f
      od -tcuC $f
  done
#+end_src


** 2
Using the Python csv package, read a file in the default csv format and
output it in tsv format.

#+begin_src python :results none
  import csv

  exampleFile = open('example.csv', 'r')
  exampleReader = csv.reader(exampleFile, delimiter=',')
  exampleData = list(exampleReader)
  exampleFile.close()
  print(exampleData)
  outputFile = open('output.csv', 'w')
  outputWriter = csv.writer(outputFile, delimiter='\t')
  for record in exampleData:
      outputWriter.writerow(record)
      outputWriter.writerow(['Leopard ', '0.7'])
  outputFile.close()
#+end_src

** 3
Define separate ~grep -E~ regular expressions matching lines with:
Regular expression format: ~man re_format~
*** Scandinavian email address
#+begin_src zsh
  grep -E '.+@.+\.(dk|no|se|ax|fi|fo|gl|is|sj)'
#+end_src

*** CPR numbers
#+begin_src zsh
  grep -E '[0-3][0-9][01][0-9]{3}-?[[:digit:]]{4}'
#+end_src

*** phone numbers written as 2 groups of 4 digits or 4 groups of 2 digits; groups separated by one space.
#+begin_src zsh
  grep -E '[[:digit:]]{4} [[:digit:]]{4}|[[:digit:]]{2}( [[:digit:]]{2}){3}' num.txt
#+end_src

*** dates in the Danish format 1/1 1970.
#+begin_src zsh
  grep -E '([1-9]|[1-2][0-9]|30|31)/([1-9]|1[012]) (([12][0-9]{3})|([1-9][0-9]{1,2})|[0-9])' num.txt
#+end_src

** 4
Using ~/usr/share/dict/words~ (or similar), define separate ~grep -E~ regular
expressions matching lines (words, since there is only one word per line in that
file) with:
*** consecutive repetition of at least three characters

#+begin_src zsh :var file="/usr/share/dict/words"
  grep -E '(.)(\1){2,}' $file
#+end_src

*** a consecutive repetition of the same sequence of four characters

#+begin_src zsh :var file="/usr/share/dict/words"
  grep -E '(....)\1' $file
#+end_src

*** a repetition of total length 4 and a palindrome of total length 4

#+begin_src zsh :results output :var file="/usr/share/dict/words"
  grep -E '(..)\1' $file | grep -E '(.)(.)\2\1'
#+end_src


#+begin_src zsh :results output :var file="/usr/share/dict/words"
  grep -E -e '(..)\1' -e '(.)(.)\2\1' $file
#+end_src

*** words without vowels (a, e, i, o, u, y); use an option

#+begin_src zsh :results output :var file="/usr/share/dict/words"
  grep -Eiv '[aeiouy]' $file
#+end_src

without the option as discussed in class:
#+begin_src zsh :results output :var file="/usr/share/dict/words"
  grep -E '^[^aeiouyAEIOUY]+$' $file
#+end_src

** 5
Define separate ~grep -E~ regular expressions matching lines with

*** an opening and closing html headline tag, e.g., <h2>My Headline</h2>
use an option to make it case insensitive, then use an option to print the
line number for every match. You may require that headlines are on a line by
themselves (and of course not nested).


#+begin_src zsh :results output
  curl --silent 'https://en.wikipedia.org/wiki/Main_Page' | grep -Ein '<(h[1-6]).*>.*</\1>'
#+end_src

*** numbers in the range 1000 through 9999

#+begin_src zsh :results output
  grep -E '(^|[^0-9])[1-9][0-9]{3}([^0-9]|$)' num.txt
#+end_src

*** numbers in the range 100 through 9999

#+begin_src zsh :results output
  grep -E '([1-9][0-9]?)[0-9]{2}' num.txt
#+end_src

** 6
Using ls -l | grep -E REGULAR_EXPRESSION, list all files in some directory
that
*** others can read or write (it is the 8th and 9th characters that are relevant)

#+begin_src zsh :results output
  ls -l | grep -E '^.{7}(r.|.w)'
#+end_src

*** were created in September and are pdf files

The following regular expression should be adapted to implementation of ls at
your disposal.
#+begin_src zsh :results output
  ls -l | grep -E '([^ ]+ +){5}Sep.*\.pdf$'
#+end_src

